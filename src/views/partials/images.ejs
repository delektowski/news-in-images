<div class="images-container"></div>

<script>

    let daysBefore = 0;
    let observer = new IntersectionObserver(intersectionObserverCallback);

    function intersectionObserverCallback(entries) {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                getDailyNewsImages();
            }
        });
    }

    function getDailyNewsImages() {
        const currentLocation = window.location.href
        const body = {daysBefore}
        fetch(`${currentLocation}days-before`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        }).then(res => res.json()).then(response => {
            daysBefore++
            if (daysBefore > 31) {
                return;
            }
            if (response.length > 0) {
                addDailyNewsImages(response)
            } else {
                getDailyNewsImages()
            }
        }).catch(err => {
            console.log("Error: ", err)
        })
    }

    function setImage(imageData) {
        const anchorTag = document.createElement("a");
        const imageContainer = document.createElement("div");
        const image = document.createElement("img");
        const imageTitle = document.createElement("p");
        const newsSrcContainer = document.createElement("div");
        const newsSrcText = document.createElement("p");
        const country = document.createElement("p");
        const newsSrcFlag = document.createElement("span");
        anchorTag.href = imageData.link;
        anchorTag.target = "_blank";
        imageContainer.classList.add("image-container");
        image.src = imageData.imgSrc;
        image.alt = "ai generated image";
        image.classList.add("image-painting");
        imageTitle.innerText = imageData.title;
        imageTitle.classList.add("img-title");
        newsSrcContainer.classList.add("news-src");
        country.classList.add("country");
        country.innerText = setCountry(imageData.country);
        newsSrcFlag.classList.add("fi", `fi-${imageData.country}`);
        newsSrcText.innerText = imageData.newsProvider;
        newsSrcContainer.append(country);
        newsSrcContainer.append(newsSrcFlag);
        newsSrcContainer.append(newsSrcText);
        imageContainer.append(image);
        imageContainer.append(imageTitle);
        imageContainer.append(newsSrcContainer);
        anchorTag.append(imageContainer);

        return anchorTag;
    }

    function addDailyNewsImages(imagesData) {
        let fragment = new DocumentFragment();
        const mainContainer = document.querySelector(".main-container");
        const imagesContainer = document.createElement("div");
        const imagesDate = imagesData[0].date
        imagesContainer.classList.add("images-container");
        addDailyNewsDate(fragment, imagesDate)
        imagesData.forEach((imageData) => {

            imagesContainer.append(setImage(imageData));
        });
        fragment.append(imagesContainer);
        mainContainer?.appendChild(fragment);

        handleLazyLoadingImagesContainer();
    }

    function addDailyNewsDate(fragment, date) {
        const dailyNewsDate = document.createElement("h3")
        dailyNewsDate.classList.add("images-date");
        dailyNewsDate.innerText = formatDate(date);
        fragment.append(dailyNewsDate);
    }

    function formatDate(date) {
        const event = new Date(date);
        const options = {year: 'numeric', month: 'long', day: 'numeric'};
        return event.toLocaleDateString('en-En', options);
    }

    function handleLazyLoadingImagesContainer() {
        const imagesContainers = document.querySelectorAll(".images-container")
        let currentObserver = imagesContainers[imagesContainers.length - 1]
        let previousObserver = imagesContainers[imagesContainers.length - 2]
        observer.observe(currentObserver)
        previousObserver && observer.unobserve(previousObserver)
    }

    function setCountry(countryCode) {
        const countries = {
            'ar': 'Argentina',
            'au': 'Australia',
            'br': 'Brazil',
            'ca': 'Canada',
            'cn': 'China',
            'fr': 'France',
            'de': 'Germany',
            'in': 'India',
            'id': 'Indonesia',
            'it': 'Italy',
            'jp': 'Japan',
            'kr': 'South Korea',
            'mx': 'Mexico',
            'ru': 'Russia',
            'sa': 'Saudi Arabia',
            'za': 'South Africa',
            'tr': 'Turkey',
            'gb': 'United Kingdom',
            'us': 'United States',
            'eu': 'European Union'
        };
        return countries[countryCode]
    }

    handleLazyLoadingImagesContainer();

</script>





